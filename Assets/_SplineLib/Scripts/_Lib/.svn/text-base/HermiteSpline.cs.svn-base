using System;
using UnityEngine;

public class HermiteSpline  : Spline
{
	public HermiteSpline (ControlPoint[] nodes) : base(nodes)
	{}
		
		
	public HermiteSpline (Vector3[] positions) : base(positions)
	{}
		
	public override Vector3 GetPosition(float time){
		if (nodes.Length==1){
			return nodes[0].position;
		}
		int i =0;
		// interpolate
		for (;i<nodes.Length-2;i++){
			if (time<nodes[i+1].distance){
				break;
			}
		}
		float t0 = nodes[i].distance;
		float t1 = nodes[i+1].distance;
		float u = (time-t0)/(t1-t0);
		
		float u2 = u*u;
		float u3 = u2*u;
		
		Vector3 p0 = nodes[i].position;
		Vector3 pd0 = nodes[i].tangent;		
		Vector3 p1 = nodes[i+1].position;
		Vector3 pd1 = nodes[i+1].tangent;
		
		return p0*(2*u3-3*u2+1)+p1*(-2*u3+3*u2)+pd0*(u3-2*u2+u)+pd1*(u3-u2);
	}
	
	public void generateTangents(){
		// m[column,row]
		float[,] m = new float[nodes.Length+1,nodes.Length+1];
		Vector3[] v = new Vector3[nodes.Length+1];
		
		for (int i=1;i<nodes.Length;i++){
			m[i-1,i] = 1;
			m[i,i] = 4;
			m[i+1,i] = 4;
			v[i] = (nodes[i+1].position-nodes[i-1].position)*3f;
		}
		m[0,0] = 1;
		v[0] = Vector3.zero;
		m[nodes.Length,nodes.Length] = 1;
		v[nodes.Length] = Vector3.one;
		printMatrix(m,v);
	}
	
	public void printMatrix(float[,] m, Vector3[] v){
		for (int row = 0;row<m.GetLength(1);row++){
			for (int column = 0;column<m.GetLength(0);column++){
				Console.Write(m[column,row]+" ");
			}
			Console.Write(v[row]);
		}
	}
}

